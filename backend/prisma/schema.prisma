generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String?
  fullName String
  imageUrl String?
  files File[]
  sentChats Chat[] @relation("SentChats")
  receivedChats Chat[] @relation("ReceivedChats")
  chatbotInteraction ChatbotInteraction[]
  peers Peer[] @relation("UserPeers")
  peerOf Peer[] @relation("PeerUsers")
}

model File {
  id Int @id @default(autoincrement())
  fileName String
  fileContent String
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id Int @id @default(autoincrement())
  message String
  fromUserId Int
  toUserId Int
  fromUser User @relation("SentChats", fields: [fromUserId], references: [id])
  toUser User @relation("ReceivedChats", fields: [toUserId], references: [id])
  createdAt DateTime @default(now())gidvjcrdlkkekfkkfbbvdjchnnrveunr
}

model ChatbotInteraction {
  id Int @id @default(autoincrement())
  question String
  response String
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Peer {
  id Int @id @default(autoincrement())
  userId Int
  peerId Int
  user User @relation("UserPeers", fields: [userId], references: [id])
  peer User @relation("PeerUsers", fields: [peerId], references: [id])
  createdAt DateTime @default(now())
}
